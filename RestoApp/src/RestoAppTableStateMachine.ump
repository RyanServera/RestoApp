class Table {
   status {
      Available {
         startOrder() / {
            new Order(new java.sql.Date(Calendar.getInstance().getTime().getTime()), new java.sql.Time(Calendar.getInstance().getTime().getTime()), this.getRestoApp(), this);
         } -> NothingOrdered;
         addToOrder(Order o) / {
            o.addTable(this);
         } -> NothingOrdered; 
      }
      NothingOrdered {
         orderItem(int quantity, Order o, Seat s, PricedMenuItem i) [quantityNotNegative(quantity)] / {
            new OrderItem(quantity,i,o,s);
         } -> Ordered; 
         addToOrderItem(OrderItem i, Seat s) / {
            if(!i.getSeats().contains(s)){
             i.getSeats().add(s);
           }
         } -> Ordered;
         endOrder(Order o) / {
            if (!o.removeTable(this)) {
               if (o.numberOfTables() == 1) {
                  o.delete();
               }
            }
         } -> Available;
      }
      Ordered {
         orderItem(int quantity, Order o, Seat s, PricedMenuItem i) [quantityNotNegative(quantity)] / {
            new OrderItem(quantity,i,o,s);
         } -> Ordered; 
         addToOrderItem(OrderItem i, Seat s) / {
            if(!i.getSeats().contains(s)){
               i.addSeat(s);
           }
         } -> Ordered;
         cancelOrderItem(OrderItem i) [iIsLastItem(i)] / {
            // delete order item
            System.out.println("This is the last item.");
            if (i.numberOfSeats() > 1)
			{
				System.out.println("Shared order item to delete: " + i.getPricedMenuItem().getMenuItem().getName());
				List<Seat> orderSeats = this.getSeats();
				int countCheck = i.numberOfSeats();
				int count = 0;
				for (Seat seat: orderSeats)
				{
					if (i.getSeats().contains(seat))
					{
						count++;
					}
					i.removeSeat(seat);
					if (count == countCheck)
					{
						i.delete();
					}
				}
			}
			else 
			{
				System.out.println("Deleted order item " + i.getPricedMenuItem().getMenuItem().getName());
				i.delete();
			}
         } -> NothingOrdered;
         cancelOrderItem(OrderItem i) [!iIsLastItem(i)] / {
            // delete order item
            System.out.println("This is not the last item.");
            if (i.numberOfSeats() > 1)
			{
				System.out.println("Shared order item to delete: " + i.getPricedMenuItem().getMenuItem().getName());
				List<Seat> orderSeats = this.getSeats();
				int countCheck = i.numberOfSeats();
				int count = 0;
				for (Seat seat: orderSeats)
				{
					if (i.getSeats().contains(seat))
					{
						count++;
					}
					i.removeSeat(seat);
					if (count == countCheck)
					{
						i.delete();
					}
				}
			}
			else 
			{
				System.out.println("Deleted order item " + i.getPricedMenuItem().getMenuItem().getName());
				i.delete();
			}
         } -> Ordered;
         cancelOrder() / {
            // delete all order items of the table
            System.out.println("Cancelling order for table: " + this.getNumber());
		List<OrderItem> orderItems = null;
		try {
			orderItems = Controller.getOrderItems(this);
		} catch (InvalidInputException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
			for (OrderItem orderItem : orderItems)
			{
				if (orderItem.numberOfSeats() > 1)
				{
					System.out.println("Shared order item to delete: " + orderItem.getPricedMenuItem().getMenuItem().getName());
					List<Seat> orderSeats = this.getSeats();
					int countCheck = orderItem.numberOfSeats();
					int count = 0;
					for (Seat seat: orderSeats)
					{
						if (orderItem.getSeats().contains(seat))
						{
							count++;
						}
						orderItem.removeSeat(seat);
						if (count == countCheck)
						{
							orderItem.delete();
						}
					}
				}
				else 
				{
					System.out.println("Deleted order item " + orderItem.getPricedMenuItem().getMenuItem().getName());
					orderItem.delete();
				}
			}
         } -> NothingOrdered;
         billForSeat(Order o, Seat s) / {
            RestoApp ra = this.getRestoApp();
            checkSeatForBill(s);
            Bill b = new Bill(o, ra, s);
			ra.addBill(b);
			s.addBill(b);
         } -> Ordered;
         addToBill(Bill b, Seat s) / {
            // add provided seat to provided bill unless seat has already been added, in which case nothing needs
            // to be done; if the provided seat is already assigned to another bill for the current order, then the
            // seat is first removed from the other bill and if no seats are left for the bill, the bill is deleted
            RestoApp ra = this.getRestoApp();
            checkSeatForBill(s);
            b.addIssuedForSeat(s);
			s.addBill(b);
         } -> Ordered;
         endOrder(Order o) [allSeatsBilled()] / {
         } -> Available;
      }
   }
   
   // check that the provided quantity is an integer greater than 0
   private boolean quantityNotNegative(int quantity) {
      return (quantity > 0);
   }

   // check that the provided order item is the last item of the current order of the table
   private boolean iIsLastItem(OrderItem i) {
      return (i.getOrder().numberOfOrderItems() == 1);
   }

   // check that all seats of the table have a bill that belongs to the current order of the table 
   private boolean allSeatsBilled() {
      List<Seat> seats = getCurrentSeats();
      Order o = getOrder(numberOfOrders()-1);
      for(Seat s : seats){
      	if(o.indexOfBill(s.getBill(s.numberOfBills()-1)) == -1){
      		return false;
      	}
      }
      return true;
   }
   
   private void checkSeatForBill(Seat s) {
		Bill b = s.getBill(s.numberOfBills()-1);
		if(!b.removeIssuedForSeat(s)) {
			if(b.numberOfIssuedForSeats() == 1) {
				b.delete();
			}
		}
	}

}
